# vim:set sw=4 ts=4 et:

# Options {{{

set main-options = -n 1000 # useful for large repos
set horizontal-scroll = 33%
set line-graphics = utf-8
set commit-order = default

set log-options = --show-signature
set diff-options = --show-signature

# }}}
# Views {{{

set blame-view	= date:default author:full file-name:auto id:yes,color line-number:no,interval=5 text
set grep-view	= file-name:no line-number:yes,interval=1 text
set main-view	= line-number:no,interval=5 id:yes date:relative author:full commit-title:yes,graph,refs,overflow=no
set refs-view	= date:default author:full ref commit-title
set stash-view	= line-number:no,interval=5 id:no date:default author:full commit-title
set status-view	= line-number:no,interval=5 status:short file-name
set tree-view	= line-number:no,interval=5 mode author:full file-size date:default id:no file-name

# }}}
# Colors {{{
color cursor white blue
color status white default
color title-focus white blue
color title-blur white default
color date yellow default
color author red default bold
color main-head magenta default
color main-tag magenta default
color stat-staged green default
color stat-unstaged red default
color stat-untracked yellow default
color tree.header white default
color tree.directory cyan default
# }}}
# Bindings {{{

# Generic {{{


# Vim-style keybindings for Tig
#
# To use these keybindings copy the file to your HOME directory and include
# it from your ~/.tigrc file:
#
#	$ cp contrib/vim.tigrc ~/.tigrc.vim
#	$ echo "source ~/.tigrc.vim" >> ~/.tigrc

bind generic h scroll-left
bind generic j move-down
bind generic k move-up
bind generic l scroll-right

bind generic g  none
bind generic gg move-first-line
bind generic gj next
bind generic gk previous
bind generic gp parent
bind generic gP back
bind generic gn view-next

bind generic G move-last-line

bind generic <C-f> move-page-down
bind generic <C-b> move-page-up

bind generic v  none
bind generic vm view-main
bind generic vd view-diff
bind generic vl view-log
bind generic vt view-tree
bind generic vx view-blob
bind generic vb view-blame
bind generic vr view-refs
bind generic vs view-status
bind generic vu view-stage
bind generic vy view-stash
bind generic vg view-grep
bind generic vp view-pager
bind generic vh view-help

bind generic o  none
bind generic oo :toggle sort-order
bind generic os :toggle sort-field
bind generic on :toggle line-number
bind generic od :toggle date
bind generic oa :toggle author
bind generic og :toggle line-graphics
bind generic of :toggle file-name
bind generic op :toggle ignore-space
bind generic oi :toggle id
bind generic ot :toggle commit-title-overflow
bind generic oF :toggle file-filter
bind generic or :toggle commit-title-refs

bind generic @  none
bind generic @j :/^@@
bind generic @k :?^@@
bind generic @- :toggle diff-context -1
bind generic @+ :toggle diff-context +1

bind status  u  none
bind stage   u  none
bind generic uu status-update
bind generic ur status-revert
bind generic um status-merge
bind generic ul stage-update-line
bind generic us stage-split-chunk

bind generic c  none
bind generic cc !git commit
bind generic ca !?@git commit --amend --no-edit

bind generic y none
bind generic yy !@csh -c "echo -n %(commit) | pbcopy"

bind generic Q quit

bind generic [ none
bind generic ] none
bind generic [m move-prev-merge
bind generic ]m move-next-merge
bind generic [q find-prev
bind generic ]q find-next

# }}}
# Main {{{


bind main g none
bind main gf !git fetch
bind main gr !git revert %(commit)

bind main ! !git revert %(commit)
bind main A @git commit --amend --reuse-message=HEAD
bind main C !?git checkout %(commit)
bind main H !?git reset --hard %(commit)
bind main R !git rebase -i --autosquash %(commit)^
bind main P !git cherry-pick %(commit)
bind main F @git commit --fixup %(commit)
bind main E !<sh -c "vim -c 'Gedit %(commit)' $(ls | head -1)"
bind main V !<sh -c "vim $(git show %(commit) --pretty=format: --name-only | xargs)"
bind main Y !@csh -c "echo -n %(commit) | pbcopy"

# }}}
# Diff {{{

bind diff <Up> move-up
bind diff <Down> move-down

# Edit all files of commit
bind diff A !git add %(file)              # Add current file
bind diff C !git commit -av               # Add and commit
bind diff P !git add -p %(file)           # Partially add current file
bind diff F !@sh -c "git show %(commit) --pretty=format: --name-only | xargs | xsel -ib"
bind diff E !<sh -c "vim -c 'Gedit %(commit)' $(ls | head -1)"
bind diff V !<sh -c "vim $(git show %(commit) --pretty=format: --name-only | xargs)"

bind diff [ none
bind diff ] none
bind diff [c :toggle diff-context -5
bind diff ]c :toggle diff-context +5

# }}}
# Tree {{{

bind tree V !vim %(file)

# }}}
# Branch {{{

bind branch N !@git branch %(prompt)
bind branch C !@git co %(branch)
bind branch R !@git rebase
bind branch D !@git branch -D %(branch)

# }}}
# Refs {{{

bind refs C !git checkout %(ref)
bind refs D !@git branch -D %(branch)
bind refs ! ?@git branch -D %(branch)

bind refs d none
bind refs dd !@git branch -D %(branch)

bind refs g none
bind refs gc !@git checkout %(ref)

# }}}
# Status {{{

bind status R !@git reset HEAD %(file)
bind status A !@git commit --amend
bind status N !@git add -N %(file)

# }}}
# Stage {{{

bind stage 1 stage-update-line # Stage a single line
bind stage C !@git commit # Commit staging changes

# }}}

# }}}
