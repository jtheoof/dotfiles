#!/bin/bash

# Get the path where the file is located.
# Then resolve symbolic link just to make sure.
BINPATH=$(dirname $(readlink -f ${BASH_SOURCE[0]}))
GITPATH=$(dirname $BINPATH)
GITDIR=$GITPATH/.git
if [ ! -d $GITDIR ]; then
    echo "could not find .git directory, something is fishy" > /dev/stderr
    exit 1
fi
echo "working in directory: $GITPATH"
FILESPATH=$GITPATH/files
BINPATH=$GITPATH/bin

function install_ppa() {
    read -p "Do you want to install the PPAs? "
    if [ ! $REPLY == 'y' ]; then
        return
    fi
    echo "installing ppas"
    sudo add-apt-repository -y ppa:tualatrix/ppa # Ubuntu Tweak
    sudo add-apt-repository -y ppa:tiheum/equinox # Faenza icons
    sudo add-apt-repository -y ppa:caffeine-developers/ppa # Caffeine
    sudo add-apt-repository -y ppa:cooperjona/lightread # Lightread
    sudo add-apt-repository -y ppa:rwky/nodejs # NodeJS

    echo "updating apt repository database"
    sudo apt-get update
}

function install_packages() {
    read -p "Do you want to install useful packages? "
    if [ ! $REPLY == 'y' ]; then
        return
    fi
    # Ubuntu
    sudo apt-get install -qy gnome-tweak-tool synapse activity-log-manager zeitgeist
    # Internet
    sudo apt-get install -qy google-chrome-stable
    # Editors
    sudo apt-get install -qy vim-gnome exuberant-ctags
    # Shell
    sudo apt-get install -qy tree ack-grep zsh terminator tilda
    # Compiz
    sudo apt-get install -qy compizconfig-settings-manager compiz-plugins-extra
    # Programming
    sudo apt-get install -qy python ruby rubygems nodejs build-essential ant autoconf
    # Graphics
    sudo apt-get install -qy gimp gcolor2 colordiff
    # VCS
    sudo apt-get install -qy git tig subversion mercurial
    # Networking
    sudo apt-get install -qy curl
}

function install_zsh() {
    read -p "Do you want to configure .oh-my-zsh? "
    if [ ! $REPLY == 'y' ]; then
        return
    fi
    cd $HOME
    echo "fetching oh-my-zsh"
    wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh
    for i in $FILESPATH/.config/zsh/themes/*; do
        echo "linking theme: $i"
        ln -is $i $HOME/.oh-my-zsh/themes/$(basename $i)
    done
    read -p "Idem for root? "
    if [ $REPLY == 'y' ]; then
        root_links=true
        sudo ln -is $HOME/.oh-my-zsh /root/.oh-my-zsh 
    fi
    read -p "Do you want to switch by default to /bin/zsh? "
    if [ ! $REPLY == 'y' ]; then
        return
    fi
    chsh -s /bin/zsh
    if $root_links ; then
        sudo chsh -s /bin/zsh root
    fi
}

function config_sudoers() {
    read -p "Do you want to configure /etc/sudoers? "
    if [ ! $REPLY == 'y' ]; then
        return
    fi
    sudo sed -i 's/\(^Defaults\(\s\+\)env_reset\)/\1\nDefaults\2timestamp_timeout=-1/g' /etc/sudoers
}

function config_vim() {
    read -p "Do you want to install vim bundles? "
    if [ ! $REPLY == 'y' ]; then
        return
    fi
    $BINPATH/vim-update-bundles -s
}
    

function link() {
    filename=$(basename $2)
    dir=$1
    echo "linking to: $dir/$filename"
    echo $dir
    if [ $dir == "/root" ]; then
        run_sudo=true
    else
        run_sudo=false
    fi
    if [ -d $dir/$filename ]; then
        if $run_sudo ; then
            sudo rm -rI $dir/$filename
        else
            rm -rI $dir/$filename
        fi
    fi
    if $run_sudo ; then
        sudo ln -is $FILESPATH/$filename $dir/$filename
    else
        ln -is $FILESPATH/$filename $dir/$filename
    fi
}

# TODO Factorize link creation to a function
# to handle existing links.
# Also, fix what happens when we try to symlink to program
# which have not been installed such as sabnzbdplus on work installs.
function make_links {
    read -p "Do you want to create $HOME symlinks? "
    if [ ! $REPLY == 'y' ]; then
        return
    fi
    home_links=true
    read -p "Idem for root? "
    if [ ! $REPLY == 'y' ]; then
        root_links=true
    fi
    for i in $FILESPATH/.*rc; do
        echo "linking config file: $i"
        if $home_links ; then
            link $HOME $i
        fi
        if $root_links ; then
            link /root $i
        fi
    done
    if $home_links ; then
        link $HOME $FILESPATH/.dircolors
        link $HOME $FILESPATH/.gitconfig
        link $HOME $FILESPATH/.vim
    fi
    if $root_links ; then
        link /root $FILESPATH/.dircolors
        link /root $FILESPATH/.gitconfig
        link /root $FILESPATH/.vim
    fi

    # Terminator config
    if [ ! -d $HOME/.config/terminator ]; then
        mkdir -p $HOME/.config/terminator
    elif [ -f $HOME/.config/terminator/config ]; then
        rm $HOME/.config/terminator/config
    fi
    echo "linking local bin"
    ln -is $BINPATH $HOME/.local/bin
    echo "linking terminator config"
    ln -is $FILESPATH/.config/terminator/config $HOME/.config/terminator/config
    echo "linking sabnzbd config"
    ln -is $FILESPATH/.sabnzbd/sabnzbd.ini $HOME/.sabnzbd/sabnzbd.ini
    if [ ! -d $HOME/.tilda ]; then
        mkdir -p $HOME/.tilda
    fi
    ln -is $FILESPATH/.tilda/config_0 $HOME/.tilda/config_0
}

# FIXME Not working because of a different format
# between terminator color and gnome-terminal color
# gcontool does not understand "#829496"
function config_terminal() {
    read -p "Do you want to configure the terminals? "
    if [ ! $REPLY == 'y' ]; then
        return
    fi
    #terminator_config=$FILESPATH/.config/terminator/config
    #palette=$(ack-grep 'palette\s*=\s*"(.*)"' $terminator_config | \
    #    ack-grep -o '".*"')
    #foreground=$(ack-grep 'foreground_color\s*=\s*"(.*)"' $terminator_config | \
    #    ack-grep -o '".*"')
    #background=$(ack-grep 'background_color\s*=\s*"(.*)"' $terminator_config | \
    #    ack-grep -o '".*"')
    #echo "palette: $palette"
    #echo "foreground: $foreground"
    #echo "background: $background"
    #gconftool-2 --set "/apps/gnome-terminal/profiles/Default/use_theme_background" --type bool false
    #gconftool-2 --set "/apps/gnome-terminal/profiles/Default/use_theme_colors" --type bool false
    #gconftool-2 --set "/apps/gnome-terminal/profiles/Default/palette" --type string $palette
    #gconftool-2 --set "/apps/gnome-terminal/profiles/Default/background_color" --type string $background
    #gconftool-2 --set "/apps/gnome-terminal/profiles/Default/foreground_color" --type string $foreground
    PROFILE=${1:-Default}
    gconftool-2 -s -t string /apps/gnome-terminal/profiles/$PROFILE/palette "#00002B2B3636:#DCDC32322F2F:#858599990000:#B5B589890000:#26268B8BD2D2:#D3D336368282:#2A2AA1A19898:#FDFDF6F6E3E3:#070736364242:#CBCB4B4B1616:#58586E6E7575:#65657B7B8383:#838394949696:#6C6C7171C4C4:#9393A1A1A1A1:#EEEEE8E8D5D5"
    # set highlighted color to be different from foreground-color
    gconftool-2 -s -t bool /apps/gnome-terminal/profiles/$PROFILE/bold_color_same_as_fg false
    # set foreground to base0 and background to base03 and highlight color to base1
    gconftool-2 -s -t string /apps/gnome-terminal/profiles/$PROFILE/background_color "#00002B2B3636"
    gconftool-2 -s -t string /apps/gnome-terminal/profiles/$PROFILE/foreground_color "#838394949696"
    gconftool-2 -s -t string /apps/gnome-terminal/profiles/$PROFILE/bold_color "#9393a1a1a1a1"
    # make sure the profile is set to not use theme colors
    gconftool-2 -s -t bool /apps/gnome-terminal/profiles/$PROFILE/use_theme_colors false
}

function install_solarized_inspector() {
    read -p "Do you want to install solarized for chrome web inspector? "
    if [ ! $REPLY == 'y' ]; then
        return
    fi
    wget -O $HOME/.config/google-chrome/Default/User\ StyleSheets/Custom.css https://raw.github.com/salazr/solarized-inspector/master/User%20StyleSheets/solarized-light.css
}

install_ppa
install_packages
install_zsh
install_solarized_inspector
make_links
config_sudoers
config_vim
config_terminal
