###########################
#  Basic C constructions  #
###########################

snippet if "if" !b
if (${1:/* cond */}) {
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet ife "if...else" !b
if (${1:/* cond */}) {
    ${VISUAL}${2:${VISUAL/(.*)/(?1::\/* code *\/)/}}
} else {
    ${0:/* code */}
}
endsnippet

snippet for "for (;;) {" !b
for (${1};${2};${3}) {
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet fori "for (int i = 0; i < 10; i++) {" !b
for (int ${1:i}; $1 < ${2:10}; ${3:$1++}) {
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet wh "while" !b
while (${1:/* cond */}) {
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet do "do .. while (cond);" !b
do {
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
} while (${1:/* condition */});
endsnippet

snippet switch "switch" !b
switch (${1:/* value */}) {
  case ${2:/* value */}:
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
    break;

  default:
    break;
}
endsnippet

snippet case "case" !b
case ${1:/* value */}:
  ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
  break;
endsnippet

snippet fun "function" !
${1:int} ${2:function_name}(${3:void})
{
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet fund "function declaration" !
${1:int} ${2:function_name}(${3:void});
endsnippet

snippet st "struct" !b
struct ${1:name}_t {
    ${0:/* fields */}
};
endsnippet

snippet tdst "typedef struct" !b
typedef struct ${1:name}_t {
    ${0:/* fields */}
} $1_t;
endsnippet

snippet fold "Add a new vim fold" !b
/*{{{ ${1:topic} */

${0:${VISUAL}}

/*}}} */
endsnippet

snippet global "Create an _G anonymous structure" !b
static struct {
    ${2:/* fields */}
} ${1:name}_g = {
#define _G  $1_g
    ${0:/* static init */}
};
endsnippet

snippet dox "Create a doxygen comment section" !b
/** ${1:Brief description}
 *
 * ${0:Long description.}
 *
 * \param[in]  param1  description of param 1.
 * \param[in]  param2  description of param 2.
 *
 * \return  description of return value.
 */
endsnippet

snippet "^(\s)*macro" "Create a macro delimited by do..while (0)" !r
#define ${1:NAME}(${2:_args})  \
    do {                                                                     \
        ${0:/* code */}                                                           \
    } while (0)
endsnippet

#################
#  qvectors/qm  #
#################

snippet "qv_for_each_pos(_safe)?" "qv_for_each_pos" !br
`!p snip.rv = match.group()`(${1:type}, ${2:pos}, ${3:vec}) {
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet "qv_for_each_(entry|ptr)" "qv_for_each_(entry|ptr)" !br
qv_for_each_`!p snip.rv = match.group(1)`(${1:type}, ${2:`!p snip.rv = match.group(1)`}, ${3:vec}) {
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet qm_for_each_pos "qm_for_each_pos" !b
qm_for_each_pos(${1:type}, ${2:pos}, ${3:h}) {
    ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

#############
#  Logging  #
#############

snippet fatal "e_fatal" !b
e_panic("${0:${VISUAL:text}}");
endsnippet

snippet panic "e_panic" !b
e_panic("${0:${VISUAL:text}}");
endsnippet

snippet err "e_error" !
e_error("${0:${VISUAL:text}}");
endsnippet

snippet warn "e_warning" !
e_warning("${0:${VISUAL:text}}");
endsnippet

snippet notice "e_notice" !b
e_notice("${0:${VISUAL:text}}");
endsnippet

snippet info "e_info" !b
e_info("${0:${VISUAL:text}}");
endsnippet

snippet debug "e_debug" !b
e_debug("${0:${VISUAL:text}}");
endsnippet

snippet trace "e_trace" !b
e_trace(${1:0}, "${0:${VISUAL:text}}");
endsnippet


###############
#  Copyright  #
###############

snippet copyright "Includes Intersec copyright block" !b
/**************************************************************************/
/*                                                                        */
/*  Copyright (C) 2004-`date +%Y` INTERSEC SA                                   */
/*                                                                        */
/*  Should you receive a copy of this source code, you must check you     */
/*  have a proper, written authorization of INTERSEC to hold it. If you   */
/*  don't have such an authorization, you must DELETE all source code     */
/*  files in your possession, and inform INTERSEC of the fact you obtain  */
/*  these files. Should you not comply to these terms, you can be         */
/*  prosecuted in the extent permitted by applicable law.                 */
/*                                                                        */
/**************************************************************************/


endsnippet
